Algorithme renderToolData :

si pas tool state ou si pas de data  {
	si dataAInterpoler pas vide {
		Creer mesure correspondante
	}
	return;
}
si interpolate = true et donnes a interpoler {
	calcul de donneesInterpolees avec dataAInterpoler
}

En ajoutant Ã  l'affichage de la frame, 1sec5 de chargement / frame.


//|| toolState.data.length == 0) {
      /*if (toolState && !toolState.removed) {
        //Remove dataInterpolated if measurement has been removed
        this.dataInterpolated = [];
        this.dataToInterpolate = [];
        toolState.removed = true;
      }
      if (this.dataInterpolated && this.dataInterpolated.length != 0) {
        const imageId = evt.detail.image.imageId;
        const seriesInstanceUID = imageId.substring(130, 182);
        if (seriesInstanceUID === this.dataInterpolated[0].seriesInstanceUid) {
          //Display interpolated data stored in dataInterpolated[0]
          const context = getNewContext(eventData.canvasContext.canvas);
          const { image, element } = eventData;
          const config = this.configuration;
          draw(context, context => {
            let color = toolColors.getToolColor();
            let oldPoints = this.dataInterpolated[0].handles.points;
            var points = [];
            var temp;
            var xtemp;
            var ytemp;
            for (let i = 0; i < oldPoints.length; i++) {
              xtemp = oldPoints[i].x;
              ytemp = oldPoints[i].y;
              temp = { x: xtemp, y: ytemp };
              points[i] = temp;
            }
            //Test Polygon draw
            drawPolygon(context, element, points, {
              color,
            });
          });
        }
      }*/
      //return;
     /* else {
      if (
        //TODO : Handle single call to interpolate
        this.dataToInterpolate &&
        toolState.data[0] &&
        toolState.data[0].handles.interpolate === true
      ) {
        //Copy data if user runned interpolation
        //In the future, call here interpolation
        this.dataInterpolated = this.dataToInterpolate;
        this.dataToInterpolate.forEach(function(data) {
          console.log(data);
        });
      }
    }
    toolState.removed = false;*/